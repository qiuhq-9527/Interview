// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file calculator/v1/calculator.proto (package calculator.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Operation type enum
 *
 * @generated from enum calculator.v1.Operation
 */
export enum Operation {
  /**
   * @generated from enum value: OPERATION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OPERATION_ADD = 1;
   */
  ADD = 1,

  /**
   * @generated from enum value: OPERATION_SUBTRACT = 2;
   */
  SUBTRACT = 2,

  /**
   * @generated from enum value: OPERATION_MULTIPLY = 3;
   */
  MULTIPLY = 3,

  /**
   * @generated from enum value: OPERATION_DIVIDE = 4;
   */
  DIVIDE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Operation)
proto3.util.setEnumType(Operation, "calculator.v1.Operation", [
  { no: 0, name: "OPERATION_UNSPECIFIED" },
  { no: 1, name: "OPERATION_ADD" },
  { no: 2, name: "OPERATION_SUBTRACT" },
  { no: 3, name: "OPERATION_MULTIPLY" },
  { no: 4, name: "OPERATION_DIVIDE" },
]);

/**
 * Request message for Calculate
 *
 * @generated from message calculator.v1.CalculateRequest
 */
export class CalculateRequest extends Message<CalculateRequest> {
  /**
   * @generated from field: double first_operand = 1;
   */
  firstOperand = 0;

  /**
   * @generated from field: double second_operand = 2;
   */
  secondOperand = 0;

  /**
   * @generated from field: calculator.v1.Operation operation = 3;
   */
  operation = Operation.UNSPECIFIED;

  constructor(data?: PartialMessage<CalculateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "calculator.v1.CalculateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_operand", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "second_operand", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "operation", kind: "enum", T: proto3.getEnumType(Operation) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CalculateRequest {
    return new CalculateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CalculateRequest {
    return new CalculateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CalculateRequest {
    return new CalculateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CalculateRequest | PlainMessage<CalculateRequest> | undefined, b: CalculateRequest | PlainMessage<CalculateRequest> | undefined): boolean {
    return proto3.util.equals(CalculateRequest, a, b);
  }
}

/**
 * Response message for Calculate
 *
 * @generated from message calculator.v1.CalculateResponse
 */
export class CalculateResponse extends Message<CalculateResponse> {
  /**
   * @generated from field: double result = 1;
   */
  result = 0;

  /**
   * Error message if any (e.g., division by zero)
   *
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<CalculateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "calculator.v1.CalculateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CalculateResponse {
    return new CalculateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CalculateResponse {
    return new CalculateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CalculateResponse {
    return new CalculateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CalculateResponse | PlainMessage<CalculateResponse> | undefined, b: CalculateResponse | PlainMessage<CalculateResponse> | undefined): boolean {
    return proto3.util.equals(CalculateResponse, a, b);
  }
}

